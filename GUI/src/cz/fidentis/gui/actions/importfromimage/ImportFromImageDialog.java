/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.fidentis.gui.actions.importfromimage;

import cz.fidentis.featurepoints.FacialPoint;
import cz.fidentis.featurepoints.FacialPointType;
import cz.fidentis.gui.GUIController;
import cz.fidentis.gui.ProjectTopComponent;
import cz.fidentis.gui.actions.newprojectwizard.ModelFileFilter;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.vecmath.TexCoord3f;

/**
 *
 * @author Marek Zuzi
 */
public class ImportFromImageDialog extends javax.swing.JDialog implements PropertyChangeListener {

    private File imageFile;
    private final List<FacialPoint> featurePoints = new ArrayList<>();
    private final ProjectTopComponent tc;
    private boolean canceled = true;

    /**
     * Creates new form ImportFromImageDialog
     */
    public ImportFromImageDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        tc = GUIController.getSelectedProjectTopComponent();
        int part = tc.getProject().getSelectedPart();
        if (part == 4) {
            panel_primarySecondary.setVisible(false);
        }
        if (part == 3) {
            radio_secondary.setText("Compared model");
        }
        canvas.setPoints(featurePoints);
        canvas.addPropertyChangeListener("featurePoints", this);
    }

    public File getImageFile() {
        return imageFile;
    }

    public List<FacialPoint> getFeaturePoints() {
        return featurePoints;
    }
    
    public boolean isPrimary() {
        return radio_primary.isSelected();
    }
    
    public int getSubdivisionDepth() {
        return (int)jSpinner1.getValue();
    }
    
    public boolean isCanceled() {
        return this.canceled;
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        but_ok.setEnabled(featurePoints.size() >= 3);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        but_browse = new javax.swing.JButton();
        but_loadFp = new javax.swing.JButton();
        panel_primarySecondary = new javax.swing.JPanel();
        radio_secondary = new javax.swing.JRadioButton();
        radio_primary = new javax.swing.JRadioButton();
        but_ok = new javax.swing.JButton();
        but_cancel = new javax.swing.JButton();
        canvas = new cz.fidentis.gui.actions.importfromimage.ImageFpCanvas();
        jLabel1 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();

        setTitle(org.openide.util.NbBundle.getMessage(ImportFromImageDialog.class, "ImportFromImageDialog.title")); // NOI18N
        setModal(true);
        setResizable(false);

        org.openide.awt.Mnemonics.setLocalizedText(but_browse, org.openide.util.NbBundle.getMessage(ImportFromImageDialog.class, "ImportFromImageDialog.but_browse.text")); // NOI18N
        but_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_browseActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(but_loadFp, org.openide.util.NbBundle.getMessage(ImportFromImageDialog.class, "ImportFromImageDialog.but_loadFp.text")); // NOI18N
        but_loadFp.setEnabled(false);
        but_loadFp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_loadFpActionPerformed(evt);
            }
        });

        panel_primarySecondary.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ImportFromImageDialog.class, "ImportFromImageDialog.panel_primarySecondary.border.title"))); // NOI18N

        buttonGroup1.add(radio_secondary);
        org.openide.awt.Mnemonics.setLocalizedText(radio_secondary, org.openide.util.NbBundle.getMessage(ImportFromImageDialog.class, "ImportFromImageDialog.radio_secondary.text")); // NOI18N

        buttonGroup1.add(radio_primary);
        radio_primary.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(radio_primary, org.openide.util.NbBundle.getMessage(ImportFromImageDialog.class, "ImportFromImageDialog.radio_primary.text")); // NOI18N

        javax.swing.GroupLayout panel_primarySecondaryLayout = new javax.swing.GroupLayout(panel_primarySecondary);
        panel_primarySecondary.setLayout(panel_primarySecondaryLayout);
        panel_primarySecondaryLayout.setHorizontalGroup(
            panel_primarySecondaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_primarySecondaryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radio_primary)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(radio_secondary)
                .addContainerGap())
        );
        panel_primarySecondaryLayout.setVerticalGroup(
            panel_primarySecondaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_primarySecondaryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_primarySecondaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radio_primary)
                    .addComponent(radio_secondary))
                .addContainerGap())
        );

        org.openide.awt.Mnemonics.setLocalizedText(but_ok, org.openide.util.NbBundle.getMessage(ImportFromImageDialog.class, "ImportFromImageDialog.but_ok.text")); // NOI18N
        but_ok.setEnabled(false);
        but_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_okActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(but_cancel, org.openide.util.NbBundle.getMessage(ImportFromImageDialog.class, "ImportFromImageDialog.but_cancel.text")); // NOI18N
        but_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                but_cancelActionPerformed(evt);
            }
        });

        canvas.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ImportFromImageDialog.class, "ImportFromImageDialog.jLabel1.text")); // NOI18N

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 6, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(canvas, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(but_loadFp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(but_browse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_primarySecondary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(but_cancel)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSpinner1)
                            .addComponent(but_ok, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(but_browse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(but_loadFp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panel_primarySecondary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(but_ok)
                            .addComponent(but_cancel))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void but_browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_browseActionPerformed
        JFileChooser chooser = new JFileChooser();
        String[] extensions = new String[8];
        extensions[0] = "jpg";
        extensions[1] = "JPG";
        extensions[2] = "jpeg";
        extensions[3] = "JPEG";
        extensions[4] = "png";
        extensions[5] = "PNG";
        extensions[6] = "gif";
        extensions[7] = "GIF";
        ModelFileFilter filter = new ModelFileFilter(extensions, "images");
        chooser.setFileFilter(filter);
        int result = chooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            canvas.setImage(chooser.getSelectedFile());
            imageFile = chooser.getSelectedFile();
            but_loadFp.setEnabled(true);
        }
    }//GEN-LAST:event_but_browseActionPerformed

    private void but_loadFpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_loadFpActionPerformed
        /*List<FpModel> loaded = FPImportExport.instance().importPoints(tc, true);
        if (loaded != null) {
            List<FacialPoint> newPoints = loaded.get(0).getFacialPoints();
            featurePoints.clear();
            for (int i = 0; i < newPoints.size(); i++) {
                featurePoints.add(newPoints.get(i));
            }
        }*/
        JFileChooser chooser = new JFileChooser();
        String[] extensions = new String[2];
        extensions[0] = "csv";
        extensions[1] = "CSV";
        ModelFileFilter filter = new ModelFileFilter(extensions, "*.csv");
        chooser.setFileFilter(filter);
        int result = chooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            List<FacialPoint> newPoints = ImportFromImage.loadFidoCsv(chooser.getSelectedFile());
            featurePoints.clear();
            for (int i = 0; i < newPoints.size(); i++) {
                featurePoints.add(newPoints.get(i));
            }
            canvas.setPoints(featurePoints);
            but_ok.setEnabled(true);
        }
    }//GEN-LAST:event_but_loadFpActionPerformed

    private void but_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_cancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_but_cancelActionPerformed

    private void but_okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_but_okActionPerformed
        this.canceled = false;
        this.setVisible(false);
    }//GEN-LAST:event_but_okActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton but_browse;
    private javax.swing.JButton but_cancel;
    private javax.swing.JButton but_loadFp;
    private javax.swing.JButton but_ok;
    private javax.swing.ButtonGroup buttonGroup1;
    private cz.fidentis.gui.actions.importfromimage.ImageFpCanvas canvas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JPanel panel_primarySecondary;
    private javax.swing.JRadioButton radio_primary;
    private javax.swing.JRadioButton radio_secondary;
    // End of variables declaration//GEN-END:variables
}
