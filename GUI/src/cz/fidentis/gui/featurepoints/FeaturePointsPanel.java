/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.fidentis.gui.featurepoints;

import cz.fidentis.gui.GUIController;
import cz.fidentis.gui.ProjectTopComponent;
import cz.fidentis.gui.actions.ButtonHelper;
import cz.fidentis.model.Model;
import cz.fidentis.renderer.FeaturePointsGLEventListener;
import cz.fidentis.renderer.GeneralGLEventListener;
import java.awt.Dimension;
import java.util.ArrayList;
import org.openide.awt.StatusDisplayer;
import org.openide.util.RequestProcessor;

/**
 *
 * @author Katka
 */
public class FeaturePointsPanel extends javax.swing.JPanel {
    ProjectTopComponent projectComponent;

    private float mouseDraggedX, mouseDraggedY;
    private boolean manipulatePoint = false;
    private boolean editablePoints = true;
    private boolean showInfo = true;
    GeneralGLEventListener listener1 = new GeneralGLEventListener();
    FeaturePointsGLEventListener listener2 = new FeaturePointsGLEventListener();
    private int indexOfSelectedPoint = -1;
    private int nextIndexOfSelectedPoint = -1;

    /**
     * Creates new form FeaturePointsPanel
     */
    public FeaturePointsPanel(ProjectTopComponent tc) {
        projectComponent = tc;
        initComponents();

        listener2.setCameraPosition(0, 0, 500);
        listener1.setCameraPosition(0, 0, 700);
        canvas2.addGLEventListener(listener2);
        canvas1.addGLEventListener(listener1);
        // canvas2.enableFPDescriptions(true);
        //canvas2.setDescriptionText("Name (x,y,z) \n \n description");
    }

    public void setPointsEditable(boolean edit) {
        editablePoints = edit;
    }

    public void setShowInfo(boolean showInfo) {
        this.showInfo = showInfo;
        if(this.showInfo && indexOfSelectedPoint != -1){
            canvas2.setFeaturePointsPanelVisibility(true);
            canvas2.setInfo(listener2.getFacialPoint(indexOfSelectedPoint));
        } else 
            canvas2.setFeaturePointsPanelVisibility(false);
        
    }
    
    public void poitsSetAngleMeasurement(Boolean edit) {
        canvas2.setPonitsLocationEditable(!edit);
        canvas2.enableFPMeasurements(edit);
        canvas2.setDescriptionText("Select three points to meassure angle. The angle will be measured by the middle point.");
    }

    public void poitsSetDistanceMeasurement(Boolean edit) {
        canvas2.setPonitsLocationEditable(!edit);
        canvas2.enableFPMeasurements(edit);
        canvas2.setDescriptionText("Select two points to meassure distance.");
    }

    public void setReferenceModel(Model model) {
        listener1.setModels(model);
        listener2.setModels(model);

    }

    public void setReferenceModel(ArrayList<Model> models) {
        listener1.setModels(models);
        listener2.setModels(models);

    }

    public void setTextureRendering(Boolean b) {
        listener1.setDrawTextures(b);
        listener2.setDrawTextures(b);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        canvas1 = new cz.fidentis.gui.Canvas(projectComponent);
        canvas2 = new cz.fidentis.gui.featurepoints.FeaturePointsCanvas(projectComponent);

        jSplitPane1.setResizeWeight(0.5);

        canvas1.setMinimumSize(new java.awt.Dimension(300, 0));
        canvas1.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                canvas1MouseWheelMoved(evt);
            }
        });
        canvas1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                canvas1MousePressed(evt);
            }
        });
        canvas1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                canvas1MouseDragged(evt);
            }
        });
        jSplitPane1.setLeftComponent(canvas1);

        canvas2.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                canvas2MouseWheelMoved(evt);
            }
        });
        canvas2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                canvas2MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                canvas2MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                canvas2MouseReleased(evt);
            }
        });
        canvas2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                canvas2MouseDragged(evt);
            }
        });
        jSplitPane1.setRightComponent(canvas2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void canvas1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvas1MousePressed
        mouseDraggedX = evt.getX();
        mouseDraggedY = evt.getY();
    }//GEN-LAST:event_canvas1MousePressed

    private void canvas2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvas2MousePressed
        mouseDraggedX = evt.getX();
        mouseDraggedY = evt.getY();
        manipulatePoint = listener2.selectPoint(evt.getX(), evt.getY());
        if (manipulatePoint){
            nextIndexOfSelectedPoint = listener2.getIndexOfSelectedPoint();
            if (indexOfSelectedPoint != nextIndexOfSelectedPoint){
                indexOfSelectedPoint = nextIndexOfSelectedPoint;
            }
            if (showInfo) {
                canvas2.setFeaturePointsPanelVisibility(true);
                canvas2.setInfo(listener2.getFacialPoint(indexOfSelectedPoint));
            }
        } else if (listener2.checkPointInMesh(evt.getX(), evt.getY()) == null){
            listener2.setIndexOfSelectedPoint(indexOfSelectedPoint = -1);
            if (showInfo){
                canvas2.setFeaturePointsPanelVisibility(false);
            }
        }

    }//GEN-LAST:event_canvas2MousePressed

    private void canvas1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvas1MouseDragged
        float x = evt.getX();
        float y = evt.getY();
        Dimension size = evt.getComponent().getSize();
        float thetaY = 360.0f * ( (x - mouseDraggedX) / (float) size.width);
        float thetaX = 360.0f * ( (mouseDraggedY - y) / (float) size.height);

        listener1.rotate(-thetaX,-thetaY);
        
        mouseDraggedX = x;
        mouseDraggedY = y;

    }//GEN-LAST:event_canvas1MouseDragged

    private void canvas2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvas2MouseDragged
        if (manipulatePoint && editablePoints) {
            if (listener2.editSelectedPoint(listener2.checkPointInMesh(evt.getX(), evt.getY())) && showInfo) {
                canvas2.setCoordInfo(listener2.getFacialPoint(indexOfSelectedPoint));
            }
        } else {
        float x = evt.getX();
        float y = evt.getY();
        Dimension size = evt.getComponent().getSize();
        float thetaY = 360.0f * ((x - mouseDraggedX) / (float) size.width);
        float thetaX = 360.0f * ((mouseDraggedY - y) / (float) size.height);

        listener2.rotate(-thetaX,-thetaY);

        mouseDraggedX = x;
        mouseDraggedY = y;
        }
    }//GEN-LAST:event_canvas2MouseDragged

    private void canvas2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvas2MouseClicked
        //listener2.selectPoint(evt.getX(), evt.getY());
    }//GEN-LAST:event_canvas2MouseClicked

    private void canvas2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvas2MouseReleased
        manipulatePoint = false;
    }//GEN-LAST:event_canvas2MouseReleased

    private void canvas1MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_canvas1MouseWheelMoved
        if (evt.getWheelRotation() > 0) {
            listener1.zoomIn(-5 * evt.getWheelRotation());
        } else {
            listener1.zoomOut(5 * evt.getWheelRotation());

        }
    }//GEN-LAST:event_canvas1MouseWheelMoved

    private void canvas2MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_canvas2MouseWheelMoved
        if (evt.getWheelRotation() > 0) {
            listener2.zoomIn(-5 * evt.getWheelRotation());
        } else {
            listener2.zoomOut(5 * evt.getWheelRotation());

        }
    }//GEN-LAST:event_canvas2MouseWheelMoved
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private cz.fidentis.gui.Canvas canvas1;
    private cz.fidentis.gui.featurepoints.FeaturePointsCanvas canvas2;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables
}
